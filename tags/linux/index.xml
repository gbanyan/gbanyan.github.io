<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on 世界樹下，霍德爾之目</title>
    <link>https://huyan.gbanyan.net/tags/linux/</link>
    <description>Recent content in Linux on 世界樹下，霍德爾之目</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sat, 20 Aug 2022 13:11:49 +0800</lastBuildDate><atom:link href="https://huyan.gbanyan.net/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Proxmox VE &#43; PfSense 安裝</title>
      <link>https://huyan.gbanyan.net/2022/08/proxmox-ve--pfsense-%E5%AE%89%E8%A3%9D/</link>
      <pubDate>Sat, 20 Aug 2022 13:11:49 +0800</pubDate>
      
      <guid>https://huyan.gbanyan.net/2022/08/proxmox-ve--pfsense-%E5%AE%89%E8%A3%9D/</guid>
      <description>Proxmox VE + pfSense 安裝 前言 家中的軟路由機器本只有安裝 OpenWRT, 也稱職地工作了一段時間。偶然注意到，網路高負載的情況下，記憶體佔用也才僅 8GB 記憶體的 1% 而已。硬體資源並沒有好好被妥善使用，工程魂就燃燒起來想榨乾他。
一種推薦配置是安裝 Proxmox VE 環境，再虛擬化 Router 軟體，剩下的資源就可以安裝其他客體作業系統如 Windows, Linux, 或者再裝 docker 服務。
Proxmox VE 安裝 pfSense 安裝 Proxmox 本身的過程蠻簡單，下載 ISO 檔，燒錄到 USB 隨身碟，啟動一步一步安裝即可。在高檔硬體配置的重型伺服器，還可以考慮 ZFS 檔案系統，不過只是一台軟路由小主機就一切從簡。
下載 pfSense iso 檔，上傳到 Proxmox VE，就可以安裝了。pfSense 的安裝也有不少教學文，甚至官方也有說明文件(Virtualizing with Proxmox® VE)。以下僅討論個人需求和架設過程中的問題。
預計架構 軟路由機器有四個實體網路孔, enp1s0, enp2s0, enp3s0, enp4s0 第一個當作 WAN 孔，其餘三孔作為 LAN 孔 Proxmox VE 可以透過 LAN 孔存取 Proxmox VE 之下虛擬化的 pfSense 作為 Router 使用，透過 WAN 進行 PPPoE 撥號 家中其餘網路設備透過 LAN 得到網路存取 問題點 一開始 Proxmox VE 已經建立一個 Linux Bridge, 為 vmbr0, 關聯到 enp1s0, 並已指派原先設定的 IP 192.</description>
      <content:encoded><![CDATA[<h1 id="proxmox-ve--pfsense-安裝">Proxmox VE + pfSense 安裝</h1>
<h2 id="前言">前言</h2>
<p>家中的軟路由機器本只有安裝 OpenWRT, 也稱職地工作了一段時間。偶然注意到，網路高負載的情況下，記憶體佔用也才僅 8GB 記憶體的 1% 而已。硬體資源並沒有好好被妥善使用，工程魂就燃燒起來想榨乾他。</p>
<p>一種推薦配置是安裝 Proxmox VE 環境，再虛擬化 Router 軟體，剩下的資源就可以安裝其他客體作業系統如 Windows, Linux, 或者再裝 docker 服務。</p>
<h2 id="proxmox-ve-安裝-pfsense">Proxmox VE 安裝 pfSense</h2>
<p>安裝 Proxmox 本身的過程蠻簡單，下載 ISO 檔，燒錄到 USB 隨身碟，啟動一步一步安裝即可。在高檔硬體配置的重型伺服器，還可以考慮 ZFS 檔案系統，不過只是一台軟路由小主機就一切從簡。</p>
<p>下載 pfSense iso 檔，上傳到 Proxmox VE，就可以安裝了。pfSense 的安裝也有不少教學文，甚至官方也有<a href="https://docs.netgate.com/pfsense/en/latest/recipes/virtualize-proxmox-ve.html">說明文件(Virtualizing with Proxmox® VE)</a>。以下僅討論個人需求和架設過程中的問題。</p>
<h3 id="預計架構">預計架構</h3>
<ul>
<li>軟路由機器有四個實體網路孔, enp1s0, enp2s0, enp3s0, enp4s0</li>
<li>第一個當作 WAN 孔，其餘三孔作為 LAN 孔</li>
<li>Proxmox VE 可以透過 LAN 孔存取</li>
<li>Proxmox VE 之下虛擬化的 pfSense 作為 Router 使用，透過 WAN 進行 PPPoE 撥號</li>
<li>家中其餘網路設備透過 LAN 得到網路存取</li>
</ul>
<h3 id="問題點">問題點</h3>
<ul>
<li>一開始 Proxmox VE 已經建立一個 Linux Bridge, 為 vmbr0, 關聯到 enp1s0, 並已指派原先設定的 IP 192.168.100.2</li>
<li>電腦端只能透過線路連接到 enp1s0 進行 Proxmox VE 的設定</li>
<li>將其他實體網路接孔 enp2s0, enp3s0, enp4s0 關聯到 vmbr1</li>
<li>Pfsense 架設完成以後，可以透過 vmbr0 指定到 WAN, vmbr1 指定到 LAN，正常進行網路撥接及區域網路分派。但此一環境直接拿去使用，無法從任何已經連結到 LAN 的機器進入 Proxmox VE 管理介面</li>
<li>接續上述，如果要進行 Proxmox VE 的管理，要整台機器拿下來，透過 enp1s0 進行連接，十分不便</li>
</ul>
<h3 id="解決方法">解決方法</h3>
<p>經過研究半天，還曾經一度搞到中途斷電設定黨整個丟掉無法開機的窘況，要重灌 Proxmox VE 的狀況，總算搞定了… 🤷‍♂️</p>
<ul>
<li>取消 vmbr0 的 預設 IP 與 Gateway，改設到 vmbr1</li>
<li>指派 vmbr1 的 IP 設定到與 Pfsense LAN 同一網段, Gateway 指向 Pfeense 192.168.1.1
<ul>
<li>pfSense 預設的 DHCP range 為 192.168.1.100 ~</li>
</ul>
</li>
</ul>
<p>這樣就可以透過 Pfsense 的 LAN 孔存取 Proxmox VE 了</p>
<p>![](&quot;/images/Pasted image 20220814154925.png&quot;)</p>
<p><img loading="lazy" src="%22/images/Proxmox.drawio.png%22" alt=""  />
</p>
<h3 id="潛在問題">潛在問題</h3>
<ul>
<li>Proxmox VE 主機必須要透過 pfSenese 才能連到外網</li>
<li>pfSense 一旦掛掉 、遷移中停止、 或其他維護等因素，所有裝置包含 Proxmox VE 主機就有可能無法連線</li>
</ul>
<h2 id="pfsense-vs-openwrt">pfSense vs OpenWRT</h2>
<p>以產品目標來了解發展脈絡，不一定要吵討論特定用途執優執劣</p>
<h3 id="pfsense">pfSense</h3>
<ul>
<li>FreeBSD 為基底，以專業防火牆目標為設計</li>
<li>防火牆管理功能一應俱全，管理監測功能完整</li>
<li>使用者介面條理分明，說明文字清楚</li>
<li>Netgate 公司提供商業付費支援，完善的說明文件，且有各應用場景 scene 的相對應參考文件</li>
</ul>
<h3 id="openwrt">OpenWRT</h3>
<ul>
<li>Linux 為基礎，以小型嵌入式裝置為導向，適合硬體資源相對低的家用無線路由器</li>
<li>小型輕量，除基本功能外，可以自行透過 opkg 安裝社群維護的套件</li>
<li>也有說明文件，但是沒有像 Netgate 為 pfSense 維護的文件那麼使用者導向
<ul>
<li>網路相關基礎知識才能理解，或未提供細節說明，需尋找更多討論文章以尋求解答</li>
<li>討論文章也不一定提供正確答案，需仰賴自己摸索。</li>
</ul>
</li>
</ul>
<p>我覺得兩個系統都很優秀，如果是一台無線路由器或硬體配置很低的機器要改裝，我會優先選擇 OpenWRT。但是像四核心 J1900 CPU, 記憶體裝到 8G 的機器，就會考慮裝 pfSense 來玩玩。</p>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://www.jkg.tw/p1464/">在 UniFi Controller 5.9.29 啟用中華電信非固定制 IPv6 服務</a></li>
<li><a href="https://pfschina.org/wp/?p=6505#IPv4%E6%8A%91%E5%88%B6%E5%88%97%E8%A1%A8">pfBlockerNG设置指南 | 鐵血男兒的BLOG</a></li>
<li><a href="https://pfschina.org/wp/?p=6686">pfSense安装AdGuardHome | 鐵血男兒的BLOG</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>再探 Linux桌面 Manjaro Linux 的漫遊</title>
      <link>https://huyan.gbanyan.net/2021/06/%E5%86%8D%E6%8E%A2-linux%E6%A1%8C%E9%9D%A2-manjaro-linux-%E7%9A%84%E6%BC%AB%E9%81%8A/</link>
      <pubDate>Tue, 15 Jun 2021 21:16:59 +0800</pubDate>
      
      <guid>https://huyan.gbanyan.net/2021/06/%E5%86%8D%E6%8E%A2-linux%E6%A1%8C%E9%9D%A2-manjaro-linux-%E7%9A%84%E6%BC%AB%E9%81%8A/</guid>
      <description>Preface 前言 記憶中的 Linux 我從國小就開始接觸 Linux了，在慢慢弄懂 Linux 體系、架構以後，對 Linux 的高可自訂性又愛又恨。後期 Linux 主要拿來當作伺服器網頁開發，將桌面環境拿來實際工作的嘗試不是沒有，但忙於課業，並沒有額外心力抓 Bugs, 因此總是以心力交瘁告終。
但是習慣 Unix 架構，所以想找一個較穩定的桌面環境，至少可以兼顧學業、工作，所以就在 2013 年買了 Macbook Air 跨入頻果體系至今。
對 Linux 桌面環境的看法一二 畢竟是軟體開發的外行人，一些對 Linux 桌面發展的想法也略顯鄙陋。不過覺得 Linux 桌面環境開發的問題，其實是來自於開放原始碼開發的社群。不同的元件，有不同個體的開發者或者團體在維護，彼此之間的想法並不總是一致，甚至會碰到意見相左吵起來懸而未決的情況。
再來，Linux 的構成元件分散成上中下游許多部分，很難要求各元件的開發團隊為了其他多到數不清的元件做完整的相容性測試，所以使用者變成要有一定 Debug 的能力。某種程度上影響了 Linux 桌面的普及程度。
Linux 社群本質上是來自世界各地，有活力但是鬆散，沒有約束力自由開闊的。想要貢獻什麼隨時可以加入或退出，也隨時可以不服別人想法自己重弄一個。在 distrowatch.org, 可以看到無數的發行版，每套發行版可能都有不一樣宗旨想法。你可以說這跟企業相比，弄出來的成品沒有長期支援的保障，但這並沒有對錯是非之分，正是 Linux 社群的特性，造就了如今 Linux 的風貌。
與 Windows, macOS 相比的劣勢及進展 筆者覺得跟完整的作業系統相比，Linux 要發展桌面系統有幾個劣勢：
顯卡廠商的支持 UI 設計的 Guideline, 像蘋果的 Human Interface Guidelines 完整的 Debug 及測試團隊，交付到使用者端時降低問題 成熟的應用程式生態體系 以 1 來說，近年來 Nvidia 還有 AMD 對 Linux 桌面的支持都在改進當中，已經不像以前那麼零落了。而第三點來說，就變成要考慮各發行版的特性，有的 Linux 桌面發行版是有完整社群團隊支持的，並且有明確宣套件從測試到進入正式發行的測試週期時程的。</description>
      <content:encoded><![CDATA[<h2 id="preface-前言">Preface 前言</h2>
<h3 id="記憶中的-linux">記憶中的 Linux</h3>
<p>我從國小就開始接觸 Linux了，在慢慢弄懂 Linux 體系、架構以後，對 Linux 的高可自訂性又愛又恨。後期 Linux 主要拿來當作伺服器網頁開發，將桌面環境拿來實際工作的嘗試不是沒有，但忙於課業，並沒有額外心力抓 Bugs, 因此總是以心力交瘁告終。</p>
<p>但是習慣 Unix 架構，所以想找一個較穩定的桌面環境，至少可以兼顧學業、工作，所以就在 2013 年買了 Macbook Air 跨入頻果體系至今。</p>
<h3 id="對-linux-桌面環境的看法一二">對 Linux 桌面環境的看法一二</h3>
<p>畢竟是軟體開發的外行人，一些對 Linux 桌面發展的想法也略顯鄙陋。不過覺得 Linux 桌面環境開發的問題，其實是來自於開放原始碼開發的社群。不同的元件，有不同個體的開發者或者團體在維護，彼此之間的想法並不總是一致，甚至會碰到意見相左吵起來懸而未決的情況。</p>
<p>再來，Linux 的構成元件分散成上中下游許多部分，很難要求各元件的開發團隊為了其他多到數不清的元件做完整的相容性測試，所以使用者變成要有一定 Debug 的能力。某種程度上影響了 Linux 桌面的普及程度。</p>
<p>Linux 社群本質上是來自世界各地，有活力但是鬆散，沒有約束力自由開闊的。想要貢獻什麼隨時可以加入或退出，也隨時可以不服別人想法自己重弄一個。在 distrowatch.org, 可以看到無數的發行版，每套發行版可能都有不一樣宗旨想法。你可以說這跟企業相比，弄出來的成品沒有長期支援的保障，但這並沒有對錯是非之分，正是 Linux 社群的特性，造就了如今 Linux 的風貌。</p>
<h3 id="與-windows-macos-相比的劣勢及進展">與 Windows, macOS 相比的劣勢及進展</h3>
<p>筆者覺得跟完整的作業系統相比，Linux 要發展桌面系統有幾個劣勢：</p>
<ol>
<li>顯卡廠商的支持</li>
<li>UI 設計的 Guideline, 像蘋果的 Human Interface Guidelines</li>
<li>完整的 Debug 及測試團隊，交付到使用者端時降低問題</li>
<li>成熟的應用程式生態體系</li>
</ol>
<p>以 1 來說，近年來 Nvidia 還有 AMD 對 Linux 桌面的支持都在改進當中，已經不像以前那麼零落了。而第三點來說，就變成要考慮各發行版的特性，有的 Linux 桌面發行版是有完整社群團隊支持的，並且有明確宣套件從測試到進入正式發行的測試週期時程的。</p>
<p>第四點，必須說，由 Chrome, Node.js 的發展，Web App 還有 elctron framework 拉近了 Linux 應用與其他作業系統的距離(這一點 macOS 也有受惠)，許多輕度的應用甚至透過瀏覽器就可以了。</p>
<h2 id="再探-linux---從-ubuntu-2004-開始">再探 Linux - 從 Ubuntu 20.04 開始</h2>
<p>新組裝了一台 PC 想偶爾玩個單人 PC 遊戲，mac mini 拿去辦公室工作用途，在家裡的主要工作環境又不想使用 Windows, 所以興起了再度使用 Linux 的念頭。</p>
<p>為了避免麻煩，於是選了 Ubuntu 20.04, 想說有企業支持的長期穩定發行版，應該很穩定吧？</p>
<p>但是用了一段時間，我卻還是更換了作業系統重新安裝，後來檢討，其實 Ubuntu 沒有大問題，只是小系統 UI bug 影響細節的觀感。</p>
<p>比如說，習慣 macOS 的相反滾輪捲動方向 (Reverse Scrolling)，在系統設定啟用卻懊惱的發現每次重新開機都會跳掉。</p>
<p>預設的 Gnome 桌面太過樸素，雖然想說服自己習慣就好，但是仍然想動手改一改，結果發現裝太多 Gnome Extension 桌面就會出現各種奇怪的 bug。</p>
<p>綜合結果不太滿意，所以決定更換 Manjaro</p>
<h2 id="manjaro-kde---自作主張的混沌">Manjaro KDE - 自作主張的混沌</h2>
<p>從這時候開始，筆者違背了一開始的初衷：降低維護成本，專注在生產用途
結果又開始花大把時間玩轉了一些實驗性功能，但是卻沒有換來太好的一致性體驗。</p>
<p>Manjaro 預設的GUI安裝程式就挺好用的了，但是為了想使用 Btrfs 和他的快照功能，所以就使用了 manjaro architect 從命令列構建。Btrfs 的 snapshot 功能很方便，但是卻導致了 grub-reboot 的記憶功能失效，導致我不能重新開機回 Windows, 下次再自動切回 Windows。</p>
<p>對 Btrfs 磁區組成結構不熟，在出事要救時，也要先花一些時間鑽研才知道怎麼下手。</p>
<p>另外 KDE 的桌面功能十分完整，看得出來想包山包海的發展路線，但是設定太多，又有隱含的 bug, 常常切換檢查會覺得很麻煩，另外 KDE 跟 Nvidia 似乎不太合，會有畫面畫面渲染的 bug。同時 Wayland 也是完全開不起來。</p>
<p>後來努力堅守，也裝了 i3-wm 這個平鋪式管理視窗堅守了一陣子。i3-wm 管理視窗習慣以後是真的很順手，而且佈局時，先思考這個視窗的用途，也有助於腦袋清醒思考。然而，i3-wm的問題是，他畢竟是一個獨立於各桌面系統開發的外來物，所以 KDE, Gnome 各桌面系統內部各元件整合時，並不會考慮與 i3-wm 的相容性。用久了，還是明顯可以看到部分系統視窗在 i3-wm 底下的奇怪行為。</p>
<h2 id="manjaro-gnome---預設安裝的美好">Manjaro Gnome - 預設安裝的美好</h2>
<p>前面所述，折騰許久還是覺得系統有大大小小的不完美之處。後來心一橫，乾脆把 Manjaro 推倒重裝，全部用 GUI 安裝程式的預設值，也不管 Btrfs 格式了。</p>
<p>桌面選擇 Gnome, 選擇中文語系，然後就一路安裝到底。</p>
<p>結果很驚訝地發現，用起來還挺順手，比對之前透過 Manjaro architect 安裝明顯好用許多。</p>
<p>我想主要原因有以下：</p>
<ol>
<li>manjaro gnome 預設有安裝一整組好用的 Gnome Extension, 補足了原生 gnome 桌面的不足</li>
<li>提供的 Layout Switcher 可以依照需求切換 Dock 位置，也有極簡化的平鋪 (Tiling) 風格。</li>
<li>Gnome 風格的系統設定比較簡單，不像 KDE 那般繁複。</li>
</ol>
<p>當然也不是沒有缺點，Gnome 桌面的缺點，是許多功能要依靠 Extension 來補足，但是 Extension 之間的相容性不見得很好，裝多了，在調整各 Extension 設定時衝突到就容易導致桌面崩潰。就算是 Manjaro 預設的調多設定也是會這樣。</p>
<p>至於拋棄 Btrfs 後的備份方案&hellip;就直接定期 rsync /home 資料夾到 NAS 資料夾裡面去了。</p>
<p>Manjaro Gnome  最讓我驚奇的是，他有內建 Pop OS! 的 Tiling Window extension, 直接提供類似於 i3-wm 的功能。之前寫 i3-wm 寫得要死要活的文字設定檔現在看起來都顯得很浪費時間。</p>
<h2 id="結尾">結尾</h2>
<p>總之，我現在停留在 Manjaro Gnome 桌面環境了，至少內建的桌面 extension, 程式碼編輯器、瀏覽器、VMWare 裝一裝也日常也還可以用。Manjaro 雖然承襲自 Arch Linux, 但是穩定性不會三天兩頭就炸掉。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
